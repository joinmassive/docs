{
  "openapi": "3.1.0",
  "info": {
    "title": "Search results",
    "description": "Extract live results from popular search engines.",
    "version": "1.0.0-beta"
  },
  "servers": [{
    "url": "https://beta.api.joinmassive.com"
  }],
  "security": [{
    "bearerAuth": []
  }],
  "paths": {
    "/search": {
      "get": {
        "summary": "Get results",
        "description": "Retrieve real-time search results or queue results for later retrieval.",
        "parameters": [{
          "name": "terms",
          "in": "query",
          "description": "The broad or exact word or phrase to query (e.g., `foo bar baz` or `\"foo bar baz\"`); the terms require [form or URL encoding](https://developer.mozilla.org/en-US/docs/Glossary/Percent-encoding) (with any space character being replaced by a `+` character or `%20` sequence).",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "name": "serps",
          "in": "query",
          "description": "The number of results pages to retrieve.",
          "schema": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10,
            "default": 1
          }
        }, {
          "name": "size",
          "in": "query",
          "description": "**[Google only]** The number of results per page to retrieve; page size is unset by default.",
          "schema": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100
          }
        }, {
          "name": "offset",
          "in": "query",
          "description": "**[Google only]** The number of initial results to skip; results arenâ€™t offset by default.",
          "schema": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100
          }
        }, {
          "name": "engine",
          "in": "query",
          "description": "The search engine to use.",
          "schema": {
            "type": "string",
            "enum": ["google", "bing", "duckduckgo"],
            "default": "google"
          }
        }, {
          "name": "device",
          "in": "query",
          "description": "**[Google only]** The name as returned by the [devices endpoint](search-devices) of the device to emulate searching on (these names are case insensitive but must include form- or URL-encoded spaces and punctuation marks); searching is done on a desktop browser by default.",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "country",
          "in": "query",
          "description": "The [two-letter ISO code](https://www.iso.org/obp/ui/#search/code) of the country to search from (these codes are case insensitive); a random country will be used by default.",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "subdivision",
          "in": "query",
          "description": "The alphanumeric second part (proceeding the separator) of a [first-level subdivision code](https://www.iso.org/obp/ui/#search/code) in the (prerequisite) country to search from (these codes are case insensitive); a random subdivision will be used by default.",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "city",
          "in": "query",
          "description": "The [commonly spelled name](https://www.geonames.org/) of the city in the (prerequisite) country to search from (these names are temporarily case sensitive and required to include form- or URL-encoded spaces and punctuation marks); a random city will be used by default.",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "uule",
          "in": "query",
          "description": "**[Google only]** The [proprietary encoded string](https://moz.com/blog/geolocation-the-ultimate-tip-to-emulate-local-search) for emulating the location to search from; if possible, the actual location will be searched from not emulated; location emulation is unused by default.",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "language",
          "in": "query",
          "description": "**[Google only]** The commonly spelled name, [two-letter ISO code](https://www.loc.gov/standards/iso639-2/php/code_list.php), or [Google code](https://www.google.com/advanced_search) of the language to search in (these names and codes are case insensitive but required to include form- or URL-encoded spaces and punctuation marks); the language is unset by default.",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "mode",
          "in": "query",
          "description": "The synchronous or asynchronous timing of when to retrieve results (see the [async endpoint](search-results)).",
          "schema": {
            "type": "string",
            "enum": ["sync", "async"],
            "default": "sync"
          }
        }, {
          "name": "format",
          "in": "query",
          "description": "The format to output to.",
          "schema": {
            "type": "string",
            "enum": ["html", "json"],
            "default": "html"
          }
        }, {
          "name": "expiration",
          "in": "query",
          "description": "The maximum age of cached results in days to accept, where `0` will disable caching.",
          "schema": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "default": 1
          }
        }, {
          "name": "subaccount",
          "in": "query",
          "description": "Any unique identifier of up to 255 characters (regardless of character encoding); Massive will bill requests made from subaccounts separately.",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "description": "The search results or a job identifier.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [{
                    "$ref": "#/components/schemas/Results"
                  }, {
                    "$ref": "#/components/schemas/Job"
                  }]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/paramsError"
          },
          "401": {
            "$ref": "#/components/responses/authenticationError"
          },
          "403": {
            "$ref": "#/components/responses/authorizationError"
          },
          "500": {
            "$ref": "#/components/responses/unknownError"
          },
          "504": {
            "$ref": "#/components/responses/timeoutError"
          }
        }
      }
    },
    "/search/results": {
      "get": {
        "summary": "Get async results",
        "description": "Retrieve the results or status of a queued job.",
        "responses": {
          "200": {
            "description": "The job results or status.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [{
                    "$ref": "#/components/schemas/Results"
                  }, {
                    "$ref": "#/components/schemas/Status"
                  }]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/paramsError"
          },
          "401": {
            "$ref": "#/components/responses/authenticationError"
          },
          "403": {
            "$ref": "#/components/responses/authorizationError"
          }
        }
      }
    },
    "/search/devices": {
      "get": {
        "summary": "Get devices",
        "description": "Retrieve a list of supported device names.",
        "responses": {
          "200": {
            "description": "The list of device names.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "BlackBerry Z30", "BlackBerry Z30 landscape", "Galaxy Note 3", "<string>"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/paramsError"
          },
          "401": {
            "$ref": "#/components/responses/authenticationError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "Results": {
        "type": "object",
        "summary": "Search results",
        "properties": {
          "engine": {
            "type": "string",
            "enum": ["google"],
            "description": "The queried search engine."
          },
          "terms": {
            "type": "string",
            "description": "The queried word or phrase.",
            "example": "foo"
          },
          "results": {
            "type": "array",
            "items": {
              "oneOf": [{
                "$ref": "#/components/schemas/Organic"
              }, {
                "$ref": "#/components/schemas/OrganicWithSitelinks"
              }],
              "discriminator": {
                "propertyName": "type"
              }
            }
          },
          "resultsCount": {
            "type": "integer",
            "minimum": 0,
            "description": "The number of parsed results.",
            "example": 43
          },
          "approxResultsCount": {
            "type": "integer",
            "minimum": 0,
            "description": "**[Google only]** The approximate number of indexed results.",
            "example": 255000000
          },
          "resultsOffset": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100,
            "nullable": true,
            "description": "**[Google only]** The number of skipped initial results.",
            "example": null
          },
          "pageCount": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10,
            "description": "The number of retrieved results pages.",
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100,
            "nullable": true,
            "description": "**[Google only]** The number of retrieved results per page.",
            "example": null
          },
          "device": {
            "type": "string",
            "nullable": true,
            "description": "**[Google only]** The name of the emulated device.",
            "example": null
          },
          "country": {
            "type": "string",
            "nullable": true,
            "description": "The ISO code of the requested country.",
            "example": null
          },
          "subdivision": {
            "type": "string",
            "nullable": true,
            "description": "The partial ISO code of the requested subdivision.",
            "example": null
          },
          "city": {
            "type": "string",
            "nullable": true,
            "description": "The name of the requested city.",
            "example": null
          },
          "uule": {
            "type": "string",
            "nullable": true,
            "description": "**[Google only]** The encoded string of the emulated location.",
            "example": null
          },
          "language": {
            "type": "string",
            "nullable": true,
            "description": "**[Google only]** The name, ISO code, or Google code of the requested language.",
            "example": null
          },
          "expiration": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "The maximum age of accepted cached results.",
            "example": 1
          }
        },
        "required": [
          "engine",
          "terms",
          "results",
          "resultsCount",
          "pageCount",
          "country",
          "subdivision",
          "city",
          "expiration"
        ]
      },
      "Organic": {
        "type": "object",
        "summary": "Organic result",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["organic"]
          },
          "page": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10,
            "example": 1
          },
          "section": {
            "type": "string",
            "example": "main"
          },
          "feature": {
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "position": {
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "url": {
            "type": "string",
            "example": "https://foofighters.com/"
          },
          "title": {
            "type": "string",
            "example": "Foo Fighters"
          },
          "site": {
            "type": "string",
            "example": "Foo Fighters"
          },
          "visibleUrl": {
            "type": "string",
            "example": "https://foofighters.com"
          },
          "date": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "snippet": {
            "type": "string",
            "example": "Official website of Foo Fighters."
          },
          "rating": {
            "type": "number",
            "minimum": 0,
            "maximum": 5,
            "nullable": true,
            "example": null
          },
          "votes": {
            "type": "integer",
            "minimum": 0,
            "nullable": true,
            "example": null
          },
          "sitelinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          }
        },
        "required": [
          "type",
          "page",
          "section",
          "feature",
          "position",
          "url",
          "title",
          "site",
          "visibleUrl",
          "date",
          "snippet",
          "rating",
          "votes",
          "sitelinks",
          "images"
        ]
      },
      "OrganicWithSitelinks": {
        "type": "object",
        "summary": "Organic result with sitelinks",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["organic-with-sitelinks"]
          },
          "page": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10
          },
          "section": {
            "type": "string"
          },
          "feature": {
            "type": "integer",
            "minimum": 1
          },
          "position": {
            "type": "integer",
            "minimum": 1
          },
          "url": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "site": {
            "type": "string"
          },
          "visibleUrl": {
            "type": "string"
          },
          "snippet": {
            "type": "string"
          },
          "sitelinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sitelink"
            }
          }
        },
        "required": [
          "type",
          "page",
          "section",
          "feature",
          "position",
          "url",
          "title",
          "site",
          "visibleUrl",
          "snippet",
          "sitelinks"
        ]
      },
      "Link": {
        "type": "object",
        "summary": "Link element",
        "properties": {
          "position": {
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "url": {
            "type": "string",
            "example": "https://foofighters.com/tour-dates/"
          },
          "title": {
            "type": "string",
            "example": "Tour Dates"
          }
        },
        "required": ["position", "url", "title"]
      },
      "Image": {
        "type": "object",
        "summary": "Image element",
        "properties": {
          "position": {
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "source": {
            "type": "string",
            "example": "[Image data]"
          },
          "altText": {
            "type": "string",
            "example": "foo from en.wikipedia.org"
          }
        },
        "required": ["position", "source", "altText"]
      },
      "Sitelink": {
        "type": "object",
        "summary": "Sitelink element",
        "properties": {
          "position": {
            "type": "integer",
            "minimum": 1
          },
          "url": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "snippet": {
            "type": "string"
          }
        },
        "required": ["position", "url", "title", "snippet"]
      },
      "Job": {
        "type": "object",
        "summary": "Search job",
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier to retrieve a queued search with.",
            "example": "078fd246-f0f7-44a0-aabb-cadd7b12454f"
          }
        },
        "required": ["id"]
      },
      "Status": {
        "type": "object",
        "summary": "Job status",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["retrieving", "failed"],
            "description": "The status of a queued search."
          }
        },
        "required": ["status"]
      }
    },
    "responses": {
      "paramsError": {
        "description": "One or more parameters were invalid.",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "example": "One or more parameters were invalid"
            }
          }
        }
      },
      "authenticationError": {
        "description": "The authorization header was missing.",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "example": "Authorization header must be provided"
            }
          }
        }
      },
      "authorizationError": {
        "description": "The API token was invalid.",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "example": "Valid API token must be provided"
            }
          }
        }
      },
      "unknownError": {
        "description": "An unknown error occurred.",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "example": "Unknown error occurred"
            }
          }
        }
      },
      "timeoutError": {
        "description": "The operation timed out.",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "example": "Operation timed out"
            }
          }
        }
      }
    }
  }
}
